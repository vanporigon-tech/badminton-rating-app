from http.server import BaseHTTPRequestHandler
import json
import urllib.parse
import math
from datetime import datetime

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
players_db = {}
rooms_db = {}
room_counter = 1

# –î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤
tournaments_db = {}
tournament_games = {}
tournament_counter = 0
current_tournament = None

# –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ Glicko-2 –¥–ª—è –±–∞–¥–º–∏–Ω—Ç–æ–Ω–∞
class Glicko2Rating:
    def __init__(self, rating=1500, rd=350, vol=0.06):
        self.rating = rating
        self.rd = rd  # Rating Deviation
        self.vol = vol  # Volatility
    
    def calculate_g(self, rd):
        """–í—ã—á–∏—Å–ª—è–µ—Ç g(RD)"""
        return 1 / math.sqrt(1 + (3 * (rd ** 2)) / (math.pi ** 2))
    
    def calculate_e(self, opponent_rating, opponent_rd):
        """–í—ã—á–∏—Å–ª—è–µ—Ç E(s|r, rj, RDj)"""
        g = self.calculate_g(opponent_rd)
        return 1 / (1 + math.exp(-g * (self.rating - opponent_rating) / 400))
    
    def update_rating(self, results, tau=0.5):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä
        results: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (opponent_rating, opponent_rd, score)
        score: 1 –∑–∞ –ø–æ–±–µ–¥—É, 0 –∑–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ, 0.5 –∑–∞ –Ω–∏—á—å—é
        """
        if not results:
            return self.rating, self.rd, self.vol
        
        # –®–∞–≥ 1: –í—ã—á–∏—Å–ª—è–µ–º v (variance)
        v = 0
        for opp_rating, opp_rd, score in results:
            g = self.calculate_g(opp_rd)
            e = self.calculate_e(opp_rating, opp_rd)
            v += (g ** 2) * e * (1 - e)
        
        if v == 0:
            return self.rating, self.rd, self.vol
        
        v = 1 / v
        
        # –®–∞–≥ 2: –í—ã—á–∏—Å–ª—è–µ–º delta
        delta = 0
        for opp_rating, opp_rd, score in results:
            g = self.calculate_g(opp_rd)
            e = self.calculate_e(opp_rating, opp_rd)
            delta += g * (score - e)
        
        delta *= v
        
        # –®–∞–≥ 3: –û–±–Ω–æ–≤–ª—è–µ–º volatility
        a = math.log(self.vol ** 2)
        
        def f(x):
            ex = math.exp(x)
            return (ex * (delta ** 2 - self.rd ** 2 - v - ex) / 
                   (2 * (self.rd ** 2 + v + ex) ** 2)) - (x - a) / (tau ** 2)
        
        # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ä–Ω—è
        A = a
        if delta ** 2 > self.rd ** 2 + v:
            B = math.log(delta ** 2 - self.rd ** 2 - v)
        else:
            k = 1
            while f(a - k * tau) < 0:
                k += 1
            B = a - k * tau
        
        fA = f(A)
        fB = f(B)
        
        while abs(B - A) > 0.000001:
            C = A + (A - B) * fA / (fB - fA)
            fC = f(C)
            if fC * fB < 0:
                A = B
                fA = fB
            else:
                fA = fA / 2
            B = C
            fB = fC
        
        new_vol = math.exp(A / 2)
        
        # –®–∞–≥ 4: –û–±–Ω–æ–≤–ª—è–µ–º RD
        new_rd = math.sqrt(self.rd ** 2 + new_vol ** 2)
        
        # –®–∞–≥ 5: –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        new_rating = self.rating + (new_rd ** 2) * delta
        
        return int(new_rating), int(new_rd), new_vol

def calculate_team_rating(players, is_winner):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è 2v2"""
    if len(players) != 2:
        return 1500
    
    # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã
    avg_rating = sum(p['rating'] for p in players) / 2
    
    # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–º–∞–Ω–¥–Ω—É—é –∏–≥—Ä—É (5% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞)
    team_bonus = avg_rating * 0.05
    
    return int(avg_rating + team_bonus)

def calculate_rating_changes(room_data, score_data):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
    score_data: {'team1': [player_ids], 'team2': [player_ids], 'score1': int, 'score2': int}
    """
    team1_players = [players_db[pid] for pid in score_data['team1'] if pid in players_db]
    team2_players = [players_db[pid] for pid in score_data['team2'] if pid in players_db]
    
    score1 = score_data['score1']
    score2 = score_data['score2']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if score1 > score2:
        team1_won = True
        team2_won = False
    elif score2 > score1:
        team1_won = False
        team2_won = True
    else:
        # –ù–∏—á—å—è
        team1_won = False
        team2_won = False
    
    changes = {}
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É 1
    if team1_players:
        team1_rating = calculate_team_rating(team1_players, team1_won)
        
        for player in team1_players:
            glicko = Glicko2Rating(player['rating'], 350, 0.06)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–∞–Ω–¥—ã 2
            results = []
            if team2_players:
                team2_rating = calculate_team_rating(team2_players, team2_won)
                score = 1 if team1_won else (0.5 if not team1_won and not team2_won else 0)
                results.append((team2_rating, 350, score))
            
            new_rating, new_rd, new_vol = glicko.update_rating(results)
            old_rating = player['rating']
            rating_change = new_rating - old_rating
            
            changes[player['telegram_id']] = {
                'old_rating': old_rating,
                'new_rating': new_rating,
                'rating_change': rating_change,
                'team': 1,
                'won': team1_won
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –±–∞–∑–µ
            player['rating'] = new_rating
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É 2
    if team2_players:
        team2_rating = calculate_team_rating(team2_players, team2_won)
        
        for player in team2_players:
            glicko = Glicko2Rating(player['rating'], 350, 0.06)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–∞–Ω–¥—ã 1
            results = []
            if team1_players:
                team1_rating = calculate_team_rating(team1_players, team1_won)
                score = 1 if team2_won else (0.5 if not team1_won and not team2_won else 0)
                results.append((team1_rating, 350, score))
            
            new_rating, new_rd, new_vol = glicko.update_rating(results)
            old_rating = player['rating']
            rating_change = new_rating - old_rating
            
            changes[player['telegram_id']] = {
                'old_rating': old_rating,
                'new_rating': new_rating,
                'rating_change': rating_change,
                'team': 2,
                'won': team2_won
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –±–∞–∑–µ
            player['rating'] = new_rating
    
    return changes

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        path = self.path.split('?')[0]
        
        # CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        
        try:
            if path == '/':
                response = {
                    "message": "üè∏ Badminton Rating API",
                    "version": "1.0.0",
                    "status": "active",
                    "database": "memory",
                    "players": len(players_db),
                    "rooms": len(rooms_db)
                }
                
            elif path == '/health':
                response = {
                    "status": "healthy",
                    "timestamp": datetime.now().isoformat()
                }
                
            elif path == '/rooms/':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
                active_rooms = [room for room in rooms_db.values() if room.get("is_active", True)]
                response = active_rooms
                
            elif path.startswith('/rooms/') and path != '/rooms/':
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
                room_id = int(path.split('/')[-1])
                if room_id in rooms_db:
                    response = rooms_db[room_id]
                else:
                    self.send_response(404)
                    response = {"error": "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
                    
            elif path.startswith('/players/'):
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
                telegram_id = int(path.split('/')[-1])
                if telegram_id in players_db:
                    response = players_db[telegram_id]
                else:
                    response = {
                        "id": telegram_id,
                        "telegram_id": telegram_id,
                        "first_name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
                        "last_name": "–ò–≥—Ä–æ–∫",
                        "username": None,
                        "rating": 1500
                    }
            else:
                self.send_response(404)
                response = {"error": "Endpoint not found"}
                
        except Exception as e:
            self.send_response(500)
            response = {"error": str(e)}
        
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        global room_counter
        
        # CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        
        try:
            content_length_str = self.headers.get('Content-Length')
            content_length = int(content_length_str) if content_length_str else 0
            if content_length > 0:
                post_data = self.rfile.read(content_length)
                data = json.loads(post_data.decode('utf-8'))
            else:
                data = {}
            
            path = self.path.split('?')[0]
            print(f"üîç POST –∑–∞–ø—Ä–æ—Å: {path}, data: {data}")
            
            if path == '/players/':
                # –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
                if 'telegram_id' not in data:
                    self.send_response(400)
                    response = {"error": "telegram_id required"}
                else:
                    telegram_id = data['telegram_id']
                    player = {
                        "id": telegram_id,
                        "telegram_id": telegram_id,
                        "first_name": data['first_name'],
                        "last_name": data.get('last_name'),
                        "username": data.get('username'),
                        "rating": 1500
                    }
                    players_db[telegram_id] = player
                    response = player
                
            elif path == '/rooms/':
                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
                if 'creator_telegram_id' not in data:
                    self.send_response(400)
                    response = {"error": "creator_telegram_id required"}
                else:
                    creator_id = data['creator_telegram_id']
                    
                    # –ü–†–û–í–ï–†–Ø–ï–ú –ù–ï –°–û–ó–î–ê–õ –õ–ò –£–ñ–ï –ö–û–ú–ù–ê–¢–£
                    existing_room = None
                    for room_id, room in rooms_db.items():
                        if room['creator_id'] == creator_id:
                            existing_room = room_id
                            break
                    
                    if existing_room:
                        self.send_response(400)
                        response = {"error": f"–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É #{existing_room}. –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–æ–º–Ω–∞—Ç—É."}
                    else:
                        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        if creator_id not in players_db:
                            players_db[creator_id] = {
                                "id": creator_id,
                                "telegram_id": creator_id,
                                "first_name": "–ò–≥—Ä–æ–∫",
                                "last_name": f"{creator_id}",
                                "username": None,
                                "rating": 1500
                            }
                    
                        creator = players_db[creator_id]
                        creator_full_name = f"{creator['first_name']} {creator.get('last_name', '')}".strip()
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
                        new_room = {
                            "id": room_counter,
                            "name": data['name'],
                            "creator_id": creator_id,
                            "creator_full_name": creator_full_name,
                            "max_players": data.get('max_players', 4),
                            "member_count": 1,
                            "is_active": True,
                            "created_at": datetime.now().isoformat(),
                            "members": [
                                {
                                    "id": 1,
                                    "player": creator,
                                    "is_leader": True,
                                    "joined_at": datetime.now().isoformat()
                                }
                            ]
                        }
                        
                        rooms_db[room_counter] = new_room
                        room_counter += 1
                        response = new_room
                
            elif path.startswith('/rooms/') and path.endswith('/join'):
                # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
                room_id = int(path.split('/')[-2])
                telegram_id = data['telegram_id']
                first_name = data.get('first_name', '–ò–≥—Ä–æ–∫')
                last_name = data.get('last_name', '')
                username = data.get('username')
                
                if room_id not in rooms_db:
                    self.send_response(404)
                    response = {"error": "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
                else:
                    room = rooms_db[room_id]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ
                    already_joined = any(member['player']['telegram_id'] == telegram_id for member in room['members'])
                    
                    if already_joined:
                        response = {"message": "–í—ã —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ", "room": room}
                    elif len(room['members']) >= room['max_players']:
                        self.send_response(400)
                        response = {"error": "–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞"}
                    else:
                        # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
                        if telegram_id not in players_db:
                            players_db[telegram_id] = {
                                "id": telegram_id,
                                "telegram_id": telegram_id,
                                "first_name": first_name,
                                "last_name": last_name,
                                "username": username,
                                "rating": 1500
                            }
                        else:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
                            players_db[telegram_id].update({
                                "first_name": first_name,
                                "last_name": last_name,
                                "username": username
                            })
                        
                        player = players_db[telegram_id]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
                        new_member = {
                            "id": len(room['members']) + 1,
                            "player": player,
                            "is_leader": False,
                            "joined_at": datetime.now().isoformat()
                        }
                        
                        room['members'].append(new_member)
                        room['member_count'] = len(room['members'])
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ –±–∞–∑–µ
                        rooms_db[room_id] = room
                        
                        response = {
                            "message": "–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ",
                            "room": room,
                            "member": new_member
                        }
                        
            elif path.startswith('/rooms/') and path.endswith('/leave'):
                # –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
                room_id = int(path.split('/')[-2])
                telegram_id = data['telegram_id']
                
                if room_id not in rooms_db:
                    self.send_response(404)
                    response = {"error": "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
                else:
                    room = rooms_db[room_id]
                    
                    # –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    member_to_remove = None
                    for i, member in enumerate(room['members']):
                        if member['player']['telegram_id'] == telegram_id:
                            member_to_remove = i
                            break
                    
                    if member_to_remove is not None:
                        # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
                        removed_member = room['members'].pop(member_to_remove)
                        room['member_count'] = len(room['members'])
                        
                        # –ï–°–õ–ò –°–û–ó–î–ê–¢–ï–õ–¨ –ü–û–ö–ò–î–ê–ï–¢ –ö–û–ú–ù–ê–¢–£ - –†–ê–°–§–û–†–ú–ò–†–û–í–´–í–ê–ï–ú –ü–û–õ–ù–û–°–¢–¨–Æ
                        if room['creator_id'] == telegram_id:
                            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            remaining_members = [member['player']['telegram_id'] for member in room['members']]
                            
                            # –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
                            del rooms_db[room_id]
                            
                            response = {
                                "message": "–ö–æ–º–Ω–∞—Ç–∞ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞",
                                "room_disbanded": True,
                                "affected_members": remaining_members
                            }
                        elif len(room['members']) == 0:
                            # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞ - —É–¥–∞–ª—è–µ–º –µ—ë
                            del rooms_db[room_id]
                            response = {"message": "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É. –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞."}
                        else:
                            # –û–±—ã—á–Ω—ã–π –≤—ã—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                            rooms_db[room_id] = room
                            response = {
                                "message": "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É",
                                "room": room,
                                "removed_member": removed_member
                            }
                    else:
                        self.send_response(400)
                        response = {"error": "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ"}
                
            else:
                self.send_response(404)
                response = {"error": "Endpoint not found"}
                
        except Exception as e:
            self.send_response(500)
            response = {"error": str(e)}
        
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
    
    def do_DELETE(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        
        try:
            path = self.path.split('?')[0]
            
            if path.startswith('/rooms/') and path != '/rooms/':
                room_id = int(path.split('/')[-1])
                if room_id in rooms_db:
                    del rooms_db[room_id]
                    response = {"message": "–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}
                else:
                    self.send_response(404)
                    response = {"error": "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
                    
            elif path.startswith('/rooms/') and path.endswith('/finish-game'):
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –ø–æ–¥—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
                room_id = int(path.split('/')[-2])
                
                if room_id not in rooms_db:
                    self.send_response(404)
                    response = {"error": "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
                else:
                    room = rooms_db[room_id]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –∫–æ–º–Ω–∞—Ç–µ 2 –∏–ª–∏ 4 –∏–≥—Ä–æ–∫–∞
                    if len(room['members']) not in [2, 4]:
                        self.send_response(400)
                        response = {"error": "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –Ω—É–∂–Ω–æ 2 –∏–ª–∏ 4 –∏–≥—Ä–æ–∫–∞"}
                    else:
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞
                        score_data = data
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
                        rating_changes = calculate_rating_changes(room, score_data)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É - –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                        room['game_finished'] = True
                        room['final_score'] = {
                            'team1': score_data['score1'],
                            'team2': score_data['score2']
                        }
                        room['rating_changes'] = rating_changes
                        room['finished_at'] = datetime.now().isoformat()
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–≥—Ä—É –≤ —Ç—É—Ä–Ω–∏—Ä, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
                        if current_tournament is not None:
                            game_data = {
                                "tournament_id": current_tournament,
                                "room_id": room_id,
                                "timestamp": datetime.now().isoformat(),
                                "team1": score_data['team1'],
                                "team2": score_data['team2'],
                                "score1": score_data['score1'],
                                "score2": score_data['score2'],
                                "rating_changes": rating_changes
                            }
                            tournament_games[current_tournament].append(game_data)
                        
                        response = {
                            "message": "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                            "room": room,
                            "rating_changes": rating_changes
                        }
                        
            elif path == '/tournament/start':
                # –ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
                response = self.start_tournament()
            elif path == '/tournament/end':
                # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
                response = self.end_tournament()
            elif path.startswith('/tournament/'):
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
                tournament_id = int(path.split('/')[-1])
                response = self.get_tournament_data(tournament_id)
                        
            else:
                self.send_response(404)
                response = {"error": "Endpoint not found"}
                
        except Exception as e:
            self.send_response(500)
            response = {"error": str(e)}
        
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
    
    def start_tournament(self):
        """–ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä"""
        global tournament_counter, current_tournament
        
        tournament_counter += 1
        current_tournament = tournament_counter
        
        tournaments_db[current_tournament] = {
            "id": current_tournament,
            "start_time": datetime.now().isoformat(),
            "status": "active"
        }
        
        tournament_games[current_tournament] = []
        
        return {
            "message": f"–¢—É—Ä–Ω–∏—Ä #{current_tournament} –Ω–∞—á–∞—Ç!",
            "tournament_id": current_tournament
        }
    
    def end_tournament(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"""
        global current_tournament
        
        if current_tournament is None:
            return {"error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞"}
        
        tournament_id = current_tournament
        tournaments_db[tournament_id]["status"] = "finished"
        tournaments_db[tournament_id]["end_time"] = datetime.now().isoformat()
        
        current_tournament = None
        
        return {
            "message": f"–¢—É—Ä–Ω–∏—Ä #{tournament_id} –∑–∞–≤–µ—Ä—à–µ–Ω!",
            "tournament_id": tournament_id
        }
    
    def get_tournament_data(self, tournament_id):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
        if tournament_id not in tournaments_db:
            return {"error": "–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        tournament = tournaments_db[tournament_id]
        games = tournament_games.get(tournament_id, [])
        
        return {
            "tournament_id": tournament_id,
            "tournament": tournament,
            "games": games,
            "message": f"–î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ #{tournament_id}"
        }
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

if __name__ == '__main__':
    from http.server import HTTPServer
    server = HTTPServer(('localhost', 8000), handler)
    print('üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000')
    server.serve_forever()